{"version":3,"sources":["components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/Form/form.module.css","components/ContactList/ContactList.module.css"],"names":["Form","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","className","st","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","onChange","pattern","title","required","TaskEditor_button","Component","ContactList","contacts","onRemoveContact","TaskList","map","contact","TaskList_item","TaskList_button","onClick","id","Filter","filter","handleInputChange","event","filterInputHandler","onFilter","placeholder","App","addContact","task","cont","includes","alert","length","uuidv4","prevState","getVisibleContacts","toLowerCase","filterHandler","removeContact","contactId","JSON","parse","localStorage","getItem","prevProps","setItem","stringify","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a8c29912.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport st from './form.module.css'\r\n\r\n\r\nexport default class Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddContact({ ...this.state });\r\n\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <form className={st.TaskEditor} onSubmit={this.handleSubmit}>\r\n        <label className={st.TaskEditor_label}>\r\n          Name\r\n          <input\r\n            className={st.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={st.TaskEditor_label}>\r\n          Number\r\n          <input\r\n            className={st.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"The phone number must be 11-12 digits long and can contain numbers, spaces, dashes, pot-bellied brackets and can start with +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={st.TaskEditor_button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};","import PropTypes from \"prop-types\";\r\nimport st from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n  <ul className={st.TaskList}>\r\n    {contacts.map((contact) => (\r\n      <li className = {st.TaskList_item}key={contact.id}>\r\n        {contact.name + \":\" + contact.number}\r\n        {\r\n          <button\r\n            className={st.TaskList_button}\r\n            type=\"button\"\r\n            name=\"delte\"\r\n            onClick={() => onRemoveContact(contact.id)}\r\n          >\r\n            delete\r\n          </button>\r\n        }\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\nexport default ContactList;","\r\n\r\nimport { Component } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass Filter extends Component {\r\n  state = {\r\n    filter: \"\",\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      filter: event.target.value,\r\n    });\r\n  };\r\n\r\n  filterInputHandler = (e) => {\r\n    const { onFilter } = this.props;\r\n    this.handleInputChange(e);\r\n    onFilter(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"search contact\"\r\n          name=\"filter\"\r\n          value={this.state.filter}\r\n          onChange={this.filterInputHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  onFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from './components/Form/Form'\nimport ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter.js'\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n        {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: \"\",\n  };\n\n  addContact = (task) => {\n    const searchSameName = this.state.contacts\n      .map((cont) => cont.name)\n      .includes(task.name);\n\n    if (searchSameName) {\n      alert(`${task.name} is already in contacts`);\n    } else if (task.name.length === 0) {\n      alert(\"Fields must be filled!\");\n    } else {\n      const contact = {\n        ...task,\n        id: uuidv4(),\n      };\n\n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    }\n  };\n\n  \n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((contacts) =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  filterHandler = (value) => {\n    this.setState(() => ({\n      filter: value,\n    }));\n  };\n\n\n  removeContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n   componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n    if (contacts) {\n      this.setState({ contacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n\n\n render() {\n    \n\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n\n        <Form onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n         <Filter onFilter={this.filterHandler} />\n        {visibleContacts.length > 0 && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemoveContact={this.removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"form_TaskEditor__NTlSj\",\"TaskEditor_label\":\"form_TaskEditor_label__2jarJ\",\"TaskEditor_input\":\"form_TaskEditor_input__xHhj9\",\"TaskEditorinput\":\"form_TaskEditorinput__1_3N7\",\"TaskEditor_button\":\"form_TaskEditor_button__jlCgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1xoOp\",\"TaskList_item\":\"ContactList_TaskList_item__1jR1s\",\"completed\":\"ContactList_completed__2jR6V\",\"TaskList_text\":\"ContactList_TaskList_text__3ppi3\",\"TaskList_actions\":\"ContactList_TaskList_actions__OFOtn\",\"TaskList_button\":\"ContactList_TaskList_button__2mdfm\"};"],"sourceRoot":""}